{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceType":"datasetVersion","sourceId":6590881,"datasetId":3803903,"databundleVersionId":6674044},{"sourceType":"modelInstanceVersion","sourceId":1497,"databundleVersionId":4906278,"modelInstanceId":1265}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"_kg_hide-input":true,"_kg_hide-output":false},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Introduction to NLP Fundamentals  in TensowFlow\n\nNLP has the goal of deriving information out of natural language (could be sequence text or speech)\nAnother common term for NLP problems is Sequence to Sequence problems (seq2seq)","metadata":{}},{"cell_type":"markdown","source":"## check for GPU","metadata":{}},{"cell_type":"code","source":"!nvidia-smi -L","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:22.633289Z","iopub.execute_input":"2024-12-16T09:02:22.634207Z","iopub.status.idle":"2024-12-16T09:02:23.651653Z","shell.execute_reply.started":"2024-12-16T09:02:22.634169Z","shell.execute_reply":"2024-12-16T09:02:23.650778Z"}},"outputs":[{"name":"stdout","text":"GPU 0: Tesla T4 (UUID: GPU-4f64dba1-7b22-8125-36cd-da11265bc185)\nGPU 1: Tesla T4 (UUID: GPU-7d62b24c-338b-011a-c38c-c2a61bfaa514)\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"!wget https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/extras/helper_functions.py","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:23.653465Z","iopub.execute_input":"2024-12-16T09:02:23.653765Z","iopub.status.idle":"2024-12-16T09:02:25.110957Z","shell.execute_reply.started":"2024-12-16T09:02:23.653735Z","shell.execute_reply":"2024-12-16T09:02:25.110109Z"}},"outputs":[{"name":"stdout","text":"--2024-12-16 09:02:24--  https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/extras/helper_functions.py\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.109.133, 185.199.111.133, 185.199.110.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.109.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 10246 (10K) [text/plain]\nSaving to: 'helper_functions.py'\n\nhelper_functions.py 100%[===================>]  10.01K  --.-KB/s    in 0.001s  \n\n2024-12-16 09:02:24 (6.87 MB/s) - 'helper_functions.py' saved [10246/10246]\n\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"from helper_functions import  compare_historys , unzip_data , plot_loss_curves , create_tensorboard_callback","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:25.112437Z","iopub.execute_input":"2024-12-16T09:02:25.112772Z","iopub.status.idle":"2024-12-16T09:02:37.309614Z","shell.execute_reply.started":"2024-12-16T09:02:25.112741Z","shell.execute_reply":"2024-12-16T09:02:37.308819Z"}},"outputs":[],"execution_count":4},{"cell_type":"markdown","source":"## Visulaizing the dataset ","metadata":{}},{"cell_type":"code","source":"import pandas as pd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.311925Z","iopub.execute_input":"2024-12-16T09:02:37.313276Z","iopub.status.idle":"2024-12-16T09:02:37.317311Z","shell.execute_reply.started":"2024-12-16T09:02:37.313233Z","shell.execute_reply":"2024-12-16T09:02:37.316335Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/nlp-getting-started/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/nlp-getting-started/test.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.318624Z","iopub.execute_input":"2024-12-16T09:02:37.319004Z","iopub.status.idle":"2024-12-16T09:02:37.432228Z","shell.execute_reply.started":"2024-12-16T09:02:37.318966Z","shell.execute_reply":"2024-12-16T09:02:37.431529Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"train_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.433307Z","iopub.execute_input":"2024-12-16T09:02:37.433599Z","iopub.status.idle":"2024-12-16T09:02:37.450370Z","shell.execute_reply.started":"2024-12-16T09:02:37.433572Z","shell.execute_reply":"2024-12-16T09:02:37.449275Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text  \\\n0   1     NaN      NaN  Our Deeds are the Reason of this #earthquake M...   \n1   4     NaN      NaN             Forest fire near La Ronge Sask. Canada   \n2   5     NaN      NaN  All residents asked to 'shelter in place' are ...   \n3   6     NaN      NaN  13,000 people receive #wildfires evacuation or...   \n4   7     NaN      NaN  Just got sent this photo from Ruby #Alaska as ...   \n\n   target  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Our Deeds are the Reason of this #earthquake M...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Forest fire near La Ronge Sask. Canada</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>All residents asked to 'shelter in place' are ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>13,000 people receive #wildfires evacuation or...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"# shuffling the data\n\ntrain_df_shuffled = train_df.sample(frac=1 , random_state = 42)\n\ntrain_df_shuffled.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.451641Z","iopub.execute_input":"2024-12-16T09:02:37.451989Z","iopub.status.idle":"2024-12-16T09:02:37.469530Z","shell.execute_reply.started":"2024-12-16T09:02:37.451951Z","shell.execute_reply":"2024-12-16T09:02:37.468733Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"        id      keyword               location  \\\n2644  3796  destruction                    NaN   \n2227  3185       deluge                    NaN   \n5448  7769       police                     UK   \n132    191   aftershock                    NaN   \n6845  9810       trauma  Montgomery County, MD   \n\n                                                   text  target  \n2644  So you have a new weapon that can cause un-ima...       1  \n2227  The f$&amp;@ing things I do for #GISHWHES Just...       0  \n5448  DT @georgegalloway: RT @Galloway4Mayor: ÛÏThe...       1  \n132   Aftershock back to school kick off was great. ...       0  \n6845  in response to trauma Children of Addicts deve...       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2644</th>\n      <td>3796</td>\n      <td>destruction</td>\n      <td>NaN</td>\n      <td>So you have a new weapon that can cause un-ima...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2227</th>\n      <td>3185</td>\n      <td>deluge</td>\n      <td>NaN</td>\n      <td>The f$&amp;amp;@ing things I do for #GISHWHES Just...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5448</th>\n      <td>7769</td>\n      <td>police</td>\n      <td>UK</td>\n      <td>DT @georgegalloway: RT @Galloway4Mayor: ÛÏThe...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>132</th>\n      <td>191</td>\n      <td>aftershock</td>\n      <td>NaN</td>\n      <td>Aftershock back to school kick off was great. ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6845</th>\n      <td>9810</td>\n      <td>trauma</td>\n      <td>Montgomery County, MD</td>\n      <td>in response to trauma Children of Addicts deve...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"# How does the test_dataframe looks like?\n\ntest_df.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.470753Z","iopub.execute_input":"2024-12-16T09:02:37.471089Z","iopub.status.idle":"2024-12-16T09:02:37.481177Z","shell.execute_reply.started":"2024-12-16T09:02:37.471051Z","shell.execute_reply":"2024-12-16T09:02:37.480134Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text\n0   0     NaN      NaN                 Just happened a terrible car crash\n1   2     NaN      NaN  Heard about #earthquake is different cities, s...\n2   3     NaN      NaN  there is a forest fire at spot pond, geese are...\n3   9     NaN      NaN           Apocalypse lighting. #Spokane #wildfires\n4  11     NaN      NaN      Typhoon Soudelor kills 28 in China and Taiwan\n5  12     NaN      NaN                 We're shaking...It's an earthquake\n6  21     NaN      NaN  They'd probably still show more life than Arse...\n7  22     NaN      NaN                                  Hey! How are you?\n8  27     NaN      NaN                                   What a nice hat?\n9  29     NaN      NaN                                          Fuck off!","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just happened a terrible car crash</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Heard about #earthquake is different cities, s...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>there is a forest fire at spot pond, geese are...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Apocalypse lighting. #Spokane #wildfires</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Typhoon Soudelor kills 28 in China and Taiwan</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>12</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>We're shaking...It's an earthquake</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>21</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>They'd probably still show more life than Arse...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>22</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Hey! How are you?</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>27</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>What a nice hat?</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>29</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Fuck off!</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"# how the train_df balanced with the data types (or biased one type more) lets see!\n\ntrain_df.target.value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.482231Z","iopub.execute_input":"2024-12-16T09:02:37.482478Z","iopub.status.idle":"2024-12-16T09:02:37.499629Z","shell.execute_reply.started":"2024-12-16T09:02:37.482428Z","shell.execute_reply":"2024-12-16T09:02:37.498693Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"target\n0    4342\n1    3271\nName: count, dtype: int64"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"# Let's visualize the random sample datas\n\nimport random\n\nrandom_index = random.randint(0, len(train_df)-5)\n\nfor row in train_df_shuffled[[\"text\",\"target\"]][random_index:random_index+5].itertuples():\n    _,text,target = row\n    print(f\" Target :{target}\" ,\"Real Disaster\" if target >0  else \"Not A Disaster\" )\n    print(f\" Text \\n{text}\")\n    print(\"------- \\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.502821Z","iopub.execute_input":"2024-12-16T09:02:37.503074Z","iopub.status.idle":"2024-12-16T09:02:37.515669Z","shell.execute_reply.started":"2024-12-16T09:02:37.503049Z","shell.execute_reply":"2024-12-16T09:02:37.514730Z"}},"outputs":[{"name":"stdout","text":" Target :1 Real Disaster\n Text \n11:30BST traffic: A10&gt;Paris A40 Geneva A7 Mons A1 Hamburg A2&gt;Hanover A5 Karlsruhe Gotthard n/b  http://t.co/yoi9tOCxiQ\n------- \n\n Target :1 Real Disaster\n Text \nTension In Bayelsa As Patience Jonathan Plans To Hijack APC PDP - http://t.co/NIpZmfLiBD\n------- \n\n Target :1 Real Disaster\n Text \nHouse Energy &amp;amp; Commerce subcommittee to hold 7/28 hearing of CDC oversight of bioterror labs Army anthrax mishaps. httÛ_\n------- \n\n Target :1 Real Disaster\n Text \nUPDATE:M.E. confirms 2 women pulled from burning house died last Friday. 91 yr old Edna Jefferson&amp;Doris Sherfield72. http://t.co/L6nSLzl7mI\n------- \n\n Target :1 Real Disaster\n Text \nUPDATE: Indiana State Police reopening I-65 near Lafayette following emergency bridge repairs that closed key highway for about 28 hours.\n------- \n\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"## split the data for training and validation data","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.516744Z","iopub.execute_input":"2024-12-16T09:02:37.517090Z","iopub.status.idle":"2024-12-16T09:02:37.539310Z","shell.execute_reply.started":"2024-12-16T09:02:37.517050Z","shell.execute_reply":"2024-12-16T09:02:37.538506Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"train_data , val_data , train_target , val_target = train_test_split(train_df_shuffled[\"text\"].to_numpy(),\n                                                                     train_df_shuffled.target.to_numpy(),\n                                                                     test_size = 0.1,\n                                                                     random_state = 42\n                                                                    )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.540274Z","iopub.execute_input":"2024-12-16T09:02:37.540558Z","iopub.status.idle":"2024-12-16T09:02:37.546147Z","shell.execute_reply.started":"2024-12-16T09:02:37.540533Z","shell.execute_reply":"2024-12-16T09:02:37.545176Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"train_df_shuffled[\"text\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.547126Z","iopub.execute_input":"2024-12-16T09:02:37.547532Z","iopub.status.idle":"2024-12-16T09:02:37.559679Z","shell.execute_reply.started":"2024-12-16T09:02:37.547450Z","shell.execute_reply":"2024-12-16T09:02:37.558890Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"2644    So you have a new weapon that can cause un-ima...\n2227    The f$&amp;@ing things I do for #GISHWHES Just...\n5448    DT @georgegalloway: RT @Galloway4Mayor: ÛÏThe...\n132     Aftershock back to school kick off was great. ...\n6845    in response to trauma Children of Addicts deve...\n                              ...                        \n5226    @Eganator2000 There aren't many Obliteration s...\n5390    just had a panic attack bc I don't have enough...\n860     Omron HEM-712C Automatic Blood Pressure Monito...\n7603    Officials say a quarantine is in place at an A...\n7270    I moved to England five years ago today. What ...\nName: text, Length: 7613, dtype: object"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"## let's check the lengths\n\nlen(train_data), len(val_data) , len(train_target), len(val_target)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.560802Z","iopub.execute_input":"2024-12-16T09:02:37.561040Z","iopub.status.idle":"2024-12-16T09:02:37.572162Z","shell.execute_reply.started":"2024-12-16T09:02:37.561005Z","shell.execute_reply":"2024-12-16T09:02:37.571413Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"(6851, 762, 6851, 762)"},"metadata":{}}],"execution_count":15},{"cell_type":"markdown","source":"## Converting text into numbers","metadata":{"execution":{"iopub.status.busy":"2024-12-15T12:52:29.814829Z","iopub.execute_input":"2024-12-15T12:52:29.815363Z","iopub.status.idle":"2024-12-15T12:52:29.819210Z","shell.execute_reply.started":"2024-12-15T12:52:29.815330Z","shell.execute_reply":"2024-12-15T12:52:29.818400Z"}}},{"cell_type":"markdown","source":"## Text Vectorization (Tokenization)","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\n\nfrom tensorflow.keras.layers import TextVectorization as TV\n\n# Using the default text vectorization parameters\n\ntext_vectorizer = TV(max_tokens = None, # how many different types of words we want take in consider for overall data , if we fix ,then non-common words be represented as <OOV>\n                    standardize = \"lower_and_strip_punctuation\",\n                    split = \"whitespace\",\n                    ngrams = None, # how many words combine to as one\n                    output_mode = \"int\" ,# how to map tokens into numbers\n                    output_sequence_length = None, # how much max length of sentence to consider for training\n                    pad_to_max_tokens = False)\n                     ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:37.573125Z","iopub.execute_input":"2024-12-16T09:02:37.573391Z","iopub.status.idle":"2024-12-16T09:02:38.505204Z","shell.execute_reply.started":"2024-12-16T09:02:37.573368Z","shell.execute_reply":"2024-12-16T09:02:38.504504Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# finding the total number of different words and average number of words in a sentence in training data\nround(sum(len(i.split()) for i in train_data)) , round(sum(len(i.split()) for i in train_data)/len(train_data))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:38.506270Z","iopub.execute_input":"2024-12-16T09:02:38.506631Z","iopub.status.idle":"2024-12-16T09:02:38.525780Z","shell.execute_reply.started":"2024-12-16T09:02:38.506594Z","shell.execute_reply":"2024-12-16T09:02:38.524813Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"(102087, 15)"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"# now setup the text vectorization variables for our data\n\nmax_vocab_length = 10000\nsequence_length = 15\n\ntext_vectorizer = TV(max_tokens = max_vocab_length,\n                    standardize = \"lower_and_strip_punctuation\",\n                    split = \"whitespace\",\n                    ngrams = None,\n                    output_mode = \"int\",\n                    output_sequence_length = sequence_length,\n                    pad_to_max_tokens = True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:38.526849Z","iopub.execute_input":"2024-12-16T09:02:38.527233Z","iopub.status.idle":"2024-12-16T09:02:38.539816Z","shell.execute_reply.started":"2024-12-16T09:02:38.527194Z","shell.execute_reply":"2024-12-16T09:02:38.538910Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"# let's fit our data to tokenizer (text Vectorization)\n\ntext_vectorizer.adapt(train_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:38.541023Z","iopub.execute_input":"2024-12-16T09:02:38.541750Z","iopub.status.idle":"2024-12-16T09:02:38.712436Z","shell.execute_reply.started":"2024-12-16T09:02:38.541696Z","shell.execute_reply":"2024-12-16T09:02:38.711694Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"# let's check on sample text\n\nsample_txt = \"there's will be an earthquake in japan\"\n\ntext_vectorizer([sample_txt])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:38.713559Z","iopub.execute_input":"2024-12-16T09:02:38.713835Z","iopub.status.idle":"2024-12-16T09:02:39.874277Z","shell.execute_reply.started":"2024-12-16T09:02:38.713808Z","shell.execute_reply":"2024-12-16T09:02:39.873389Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"<tf.Tensor: shape=(1, 15), dtype=int64, numpy=\narray([[264,  38,  21,  39, 290,   4, 224,   0,   0,   0,   0,   0,   0,\n          0,   0]])>"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"# check on random sample data\n\nrandom_txt = random.choice(train_data)\n\nprint(f\"Original text\\n {random_txt} \\n after Vectorization\\n\")\ntext_vectorizer([random_txt])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:39.875244Z","iopub.execute_input":"2024-12-16T09:02:39.875551Z","iopub.status.idle":"2024-12-16T09:02:39.891002Z","shell.execute_reply.started":"2024-12-16T09:02:39.875523Z","shell.execute_reply":"2024-12-16T09:02:39.890117Z"}},"outputs":[{"name":"stdout","text":"Original text\n Longest Streak of Triple-Digit Heat Since 2013 Forecast in Dallas: An unrelenting and dangerous heat wave will... http://t.co/s4Srgrmqcz \n after Vectorization\n\n","output_type":"stream"},{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"<tf.Tensor: shape=(1, 15), dtype=int64, numpy=\narray([[2887, 2278,    6, 2643,  288,  216, 1336, 1522,    4, 3073,   39,\n        4339,    7, 1418,  288]])>"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"# Get the unique words\n\nwords_in_vocab = text_vectorizer.get_vocabulary()\ntop_5_words = words_in_vocab[:5]\nbottom_5_words = words_in_vocab[-5:]\n\nprint(f\"Number of words in vocab {len(words_in_vocab)}\")\nprint(f\"top 5 common words in vocab {top_5_words}\")\nprint(f\"bottom 5 words {bottom_5_words} \")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:39.892168Z","iopub.execute_input":"2024-12-16T09:02:39.892539Z","iopub.status.idle":"2024-12-16T09:02:39.922598Z","shell.execute_reply.started":"2024-12-16T09:02:39.892499Z","shell.execute_reply":"2024-12-16T09:02:39.921881Z"}},"outputs":[{"name":"stdout","text":"Number of words in vocab 10000\ntop 5 common words in vocab ['', '[UNK]', 'the', 'a', 'in']\nbottom 5 words ['pages', 'paeds', 'pads', 'padres', 'paddytomlinson1'] \n","output_type":"stream"}],"execution_count":22},{"cell_type":"markdown","source":"## Creating  an Embedding using Embedding layer\n\nwe 're using Tensorflows embedding layers\n\nkey parameters are :\n\n`input_dim` : the size of our vocab \\\n`output_dim` : the size of output embedding vector  for example of 100 means a word converted into 100 length vector\\\n`input length` : length of sequence being passed","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.layers import Embedding\n\nembedding = Embedding(input_dim = max_vocab_length,\n                     output_dim = 128)\nembedding","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:39.923408Z","iopub.execute_input":"2024-12-16T09:02:39.923658Z","iopub.status.idle":"2024-12-16T09:02:39.929727Z","shell.execute_reply.started":"2024-12-16T09:02:39.923635Z","shell.execute_reply":"2024-12-16T09:02:39.928865Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"<Embedding name=embedding, built=False>"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"random_txt = random.choice(train_data)\nprint(f\"Original sentence \\n{random_txt} after embedding\\n\")\nembed = embedding(text_vectorizer([random_txt]))\nprint(f\"{embed.shape}\")\n\nprint(embed)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:39.930748Z","iopub.execute_input":"2024-12-16T09:02:39.931006Z","iopub.status.idle":"2024-12-16T09:02:39.987669Z","shell.execute_reply.started":"2024-12-16T09:02:39.930982Z","shell.execute_reply":"2024-12-16T09:02:39.986831Z"}},"outputs":[{"name":"stdout","text":"Original sentence \nIT STARTS A FOREST FIRE THAT CANNOT BE PUT OUT. http://t.co/3STfmN26r9 after embedding\n\n(1, 15, 128)\ntf.Tensor(\n[[[-0.03712086 -0.00275143  0.00204421 ... -0.0206057   0.01731745\n    0.01336367]\n  [-0.00259713 -0.03885595 -0.00336242 ... -0.02330105 -0.00551798\n    0.00087386]\n  [ 0.01005731 -0.043527    0.03568462 ... -0.03760434 -0.03491922\n    0.00564158]\n  ...\n  [ 0.02544794 -0.00495392  0.00086256 ...  0.02458243 -0.02252551\n    0.01912749]\n  [ 0.02544794 -0.00495392  0.00086256 ...  0.02458243 -0.02252551\n    0.01912749]\n  [ 0.02544794 -0.00495392  0.00086256 ...  0.02458243 -0.02252551\n    0.01912749]]], shape=(1, 15, 128), dtype=float32)\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"# each word vector representation\nprint(f\"Original sentence \\n {random_txt}\")\nprint(f\"first word {random_txt.split()[0]}\") \nprint(f\"first word vector \\n {embed[0][0]}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:39.988609Z","iopub.execute_input":"2024-12-16T09:02:39.988877Z","iopub.status.idle":"2024-12-16T09:02:39.997196Z","shell.execute_reply.started":"2024-12-16T09:02:39.988849Z","shell.execute_reply":"2024-12-16T09:02:39.996463Z"}},"outputs":[{"name":"stdout","text":"Original sentence \n IT STARTS A FOREST FIRE THAT CANNOT BE PUT OUT. http://t.co/3STfmN26r9\nfirst word IT\nfirst word vector \n [-0.03712086 -0.00275143  0.00204421 -0.00516267 -0.01733686 -0.01675246\n  0.00731056  0.03494625  0.00162463  0.03505305  0.04589856 -0.03279864\n  0.03858458 -0.04977445 -0.03377636  0.00626208  0.01035536 -0.0409178\n -0.0021861   0.00260116  0.00439656 -0.0080698   0.04926402 -0.00801905\n -0.03994393  0.00664677  0.00294423 -0.02424312  0.00715005  0.00093263\n -0.03164375  0.02775594 -0.03163218  0.01752937 -0.04864166  0.04828156\n -0.02582538 -0.00993849 -0.03458457 -0.03105219 -0.01642992  0.03692884\n  0.00796228 -0.01872573  0.00722059  0.02760272  0.01944195 -0.03536669\n  0.02872087 -0.04475281 -0.00747209  0.01399184 -0.02108396 -0.03197183\n  0.04507822 -0.00715833  0.02123806 -0.04716814  0.01937166 -0.03607823\n  0.01070398  0.03062112  0.02809473 -0.04191264  0.02381315 -0.02390889\n -0.02649747  0.01984706  0.00877161 -0.04017473 -0.0318751  -0.03993637\n  0.01601442 -0.0401842  -0.01583763  0.02399493 -0.03561335 -0.0041302\n -0.00891225  0.01712059 -0.0023569  -0.00274448  0.04935485 -0.002561\n -0.01302982  0.02755358  0.03496942  0.04591838 -0.00875289 -0.00892692\n  0.01231843  0.0139086   0.03572949 -0.02559813  0.02356334 -0.04289487\n -0.04448732  0.02120732 -0.01114364  0.00248719 -0.01977078  0.02188358\n  0.0341186  -0.0319518  -0.04956235  0.0253907  -0.04439804 -0.02022605\n  0.03513226 -0.03041139  0.02813574  0.01616894 -0.01174317 -0.00233094\n  0.00755316  0.01909303 -0.00654298  0.03813538  0.04770574  0.03841957\n  0.04696432  0.00323056 -0.02660471 -0.0019447   0.02498061 -0.0206057\n  0.01731745  0.01336367]\n","output_type":"stream"}],"execution_count":25},{"cell_type":"markdown","source":"## Modelling a text dataset (running a series of experiments)\n\nwe'll start with base line and start with there\n\n* Model 0 : Naive Bayes model\n* Model 1 : Feed-forward neural network (Dense model)\n* Model 2 : LSTM Model (RNN)\n* Model 3 : GRU Model (RNN)\n* Model 4 : Bidirectional - LSTM Model (RNN)\n* Model 5 : 1D Convolutional Neural Network (CNN)\n* Model 6 : Pre-trained model from TensorFlow Hub (Transfer learning )\n* Model 7 : Model 6 with only 10% of training data","metadata":{}},{"cell_type":"markdown","source":"### Model 0 : Getting a baseline model\n\nTo create a baseline model , we;ll use sklearn Multinomial Naive Bayes using TF_IDF formula to convert our words into numbers\n\n","metadata":{}},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.naive_bayes import MultinomialNB\n\nfrom sklearn.pipeline import Pipeline\n\nmodel_0 = Pipeline([\n    (\"tfidf\" , TfidfVectorizer()),\n    (\"clf\", MultinomialNB())\n])\n\n# fit the model\n\nmodel_0.fit(train_data , train_target)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:39.998171Z","iopub.execute_input":"2024-12-16T09:02:39.998562Z","iopub.status.idle":"2024-12-16T09:02:40.162637Z","shell.execute_reply.started":"2024-12-16T09:02:39.998534Z","shell.execute_reply":"2024-12-16T09:02:40.161720Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('tfidf', TfidfVectorizer()), ('clf', MultinomialNB())])","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;tfidf&#x27;, TfidfVectorizer()), (&#x27;clf&#x27;, MultinomialNB())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;tfidf&#x27;, TfidfVectorizer()), (&#x27;clf&#x27;, MultinomialNB())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">TfidfVectorizer</label><div class=\"sk-toggleable__content\"><pre>TfidfVectorizer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultinomialNB</label><div class=\"sk-toggleable__content\"><pre>MultinomialNB()</pre></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"# let's evalulate the model_0\n\nprint(f\"{model_0.score(val_data,val_target)*100:.2f} \")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:40.163656Z","iopub.execute_input":"2024-12-16T09:02:40.163886Z","iopub.status.idle":"2024-12-16T09:02:40.181041Z","shell.execute_reply.started":"2024-12-16T09:02:40.163863Z","shell.execute_reply":"2024-12-16T09:02:40.180229Z"}},"outputs":[{"name":"stdout","text":"79.27 \n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"# create an evaluation function\n\nfrom sklearn.metrics import accuracy_score , precision_recall_fscore_support\n\ndef calculate_result(y_true , y_preds):\n    \"\"\" this function helps in finding accuracy , precision, recall , f1score by taking y_true and y_preds\"\"\"\n    model_accuracy = accuracy_score(y_true , y_preds)*100\n    model_precision , model_recall , model_f1, _ = precision_recall_fscore_support(y_true,y_preds,average=\"weighted\")\n    model_result = {\"accuracy\":model_accuracy,\"precision\":model_precision,\"recall\":model_recall,\"f1_score\":model_f1}\n    return model_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:40.182072Z","iopub.execute_input":"2024-12-16T09:02:40.182536Z","iopub.status.idle":"2024-12-16T09:02:40.193247Z","shell.execute_reply.started":"2024-12-16T09:02:40.182498Z","shell.execute_reply":"2024-12-16T09:02:40.192489Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"y_preds = model_0.predict(val_data)\nbaseline_result=calculate_result(val_target,y_preds)\nbaseline_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:40.197745Z","iopub.execute_input":"2024-12-16T09:02:40.198057Z","iopub.status.idle":"2024-12-16T09:02:40.219573Z","shell.execute_reply.started":"2024-12-16T09:02:40.198030Z","shell.execute_reply":"2024-12-16T09:02:40.218745Z"}},"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 79.26509186351706,\n 'precision': 0.8111390004213173,\n 'recall': 0.7926509186351706,\n 'f1_score': 0.7862189758049549}"},"metadata":{}}],"execution_count":29},{"cell_type":"markdown","source":"### model_1  A simple dense model","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras import layers\n\ninput = layers.Input(shape=(1,), dtype=tf.string)\nx = text_vectorizer(input)\nx = embedding(x)\nx = layers.GlobalMaxPool1D()(x)\noutput = layers.Dense(1,activation = \"sigmoid\")(x)\n\nmodel_1 = tf.keras.Model(input , output , name = \"model_1\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:40.220677Z","iopub.execute_input":"2024-12-16T09:02:40.221015Z","iopub.status.idle":"2024-12-16T09:02:40.245588Z","shell.execute_reply.started":"2024-12-16T09:02:40.220977Z","shell.execute_reply":"2024-12-16T09:02:40.244748Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"model_1.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:40.246602Z","iopub.execute_input":"2024-12-16T09:02:40.246860Z","iopub.status.idle":"2024-12-16T09:02:40.264331Z","shell.execute_reply.started":"2024-12-16T09:02:40.246834Z","shell.execute_reply":"2024-12-16T09:02:40.263504Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"model_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"model_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ text_vectorization_1            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m15\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mTextVectorization\u001b[0m)             │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m15\u001b[0m, \u001b[38;5;34m128\u001b[0m)        │     \u001b[38;5;34m1,280,000\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ global_max_pooling1d            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mGlobalMaxPooling1D\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │           \u001b[38;5;34m129\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ text_vectorization_1            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TextVectorization</span>)             │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)        │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,280,000</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ global_max_pooling1d            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalMaxPooling1D</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">129</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,280,129\u001b[0m (4.88 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,280,129</span> (4.88 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,280,129\u001b[0m (4.88 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,280,129</span> (4.88 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"# compile the model\n\nmodel_1.compile(loss = \"binary_crossentropy\",\n               optimizer = tf.keras.optimizers.Adam(),\n               metrics = [\"accuracy\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:40.265285Z","iopub.execute_input":"2024-12-16T09:02:40.265554Z","iopub.status.idle":"2024-12-16T09:02:40.276460Z","shell.execute_reply.started":"2024-12-16T09:02:40.265530Z","shell.execute_reply":"2024-12-16T09:02:40.275684Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"Save_dir = \"model_logs\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:40.277426Z","iopub.execute_input":"2024-12-16T09:02:40.277835Z","iopub.status.idle":"2024-12-16T09:02:40.282029Z","shell.execute_reply.started":"2024-12-16T09:02:40.277797Z","shell.execute_reply":"2024-12-16T09:02:40.281257Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"model_1_history = model_1.fit(train_data, train_target,\n                             epochs = 5,\n                             validation_data = (val_data,val_target),\n                             callbacks = [create_tensorboard_callback(dir_name = Save_dir,experiment_name=\"model_1\")])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:40.282970Z","iopub.execute_input":"2024-12-16T09:02:40.283232Z","iopub.status.idle":"2024-12-16T09:02:47.952797Z","shell.execute_reply.started":"2024-12-16T09:02:40.283194Z","shell.execute_reply":"2024-12-16T09:02:47.951905Z"}},"outputs":[{"name":"stdout","text":"Saving TensorBoard log files to: model_logs/model_1/20241216-090240\nEpoch 1/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.6036 - loss: 0.6655 - val_accuracy: 0.7572 - val_loss: 0.5689\nEpoch 2/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.8173 - loss: 0.4980 - val_accuracy: 0.7848 - val_loss: 0.4761\nEpoch 3/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.8747 - loss: 0.3529 - val_accuracy: 0.7874 - val_loss: 0.4524\nEpoch 4/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9091 - loss: 0.2620 - val_accuracy: 0.7887 - val_loss: 0.4541\nEpoch 5/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9390 - loss: 0.1927 - val_accuracy: 0.7927 - val_loss: 0.4637\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"model_1.evaluate(val_data,val_target)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:47.954032Z","iopub.execute_input":"2024-12-16T09:02:47.954739Z","iopub.status.idle":"2024-12-16T09:02:48.067543Z","shell.execute_reply.started":"2024-12-16T09:02:47.954697Z","shell.execute_reply":"2024-12-16T09:02:48.066657Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.7798 - loss: 0.5084 \n","output_type":"stream"},{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"[0.4637080729007721, 0.7926509380340576]"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"model_1_preds = model_1.predict(val_data)\nmodel_1_preds[:10]\nmodel_1_preds.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:48.068752Z","iopub.execute_input":"2024-12-16T09:02:48.069109Z","iopub.status.idle":"2024-12-16T09:02:48.396951Z","shell.execute_reply.started":"2024-12-16T09:02:48.069072Z","shell.execute_reply":"2024-12-16T09:02:48.396185Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","output_type":"stream"},{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"(762, 1)"},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"model_1_preds = tf.squeeze(tf.round(model_1_preds))\n\nmodel_1_result = calculate_result(y_true = val_target, y_preds = model_1_preds )\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:48.398200Z","iopub.execute_input":"2024-12-16T09:02:48.398824Z","iopub.status.idle":"2024-12-16T09:02:48.470342Z","shell.execute_reply.started":"2024-12-16T09:02:48.398792Z","shell.execute_reply":"2024-12-16T09:02:48.469662Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"model_1_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:48.471367Z","iopub.execute_input":"2024-12-16T09:02:48.471658Z","iopub.status.idle":"2024-12-16T09:02:48.477045Z","shell.execute_reply.started":"2024-12-16T09:02:48.471630Z","shell.execute_reply":"2024-12-16T09:02:48.476083Z"}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 79.26509186351706,\n 'precision': 0.7961676493734986,\n 'recall': 0.7926509186351706,\n 'f1_score': 0.7902780510246633}"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"baseline_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:48.478388Z","iopub.execute_input":"2024-12-16T09:02:48.479273Z","iopub.status.idle":"2024-12-16T09:02:48.488529Z","shell.execute_reply.started":"2024-12-16T09:02:48.479245Z","shell.execute_reply":"2024-12-16T09:02:48.487531Z"}},"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 79.26509186351706,\n 'precision': 0.8111390004213173,\n 'recall': 0.7926509186351706,\n 'f1_score': 0.7862189758049549}"},"metadata":{}}],"execution_count":39},{"cell_type":"markdown","source":"### Model_2 LSTM model\n(Long Short Term Memory)","metadata":{"execution":{"iopub.status.busy":"2024-12-15T23:39:25.546752Z","iopub.execute_input":"2024-12-15T23:39:25.547132Z","iopub.status.idle":"2024-12-15T23:39:25.552791Z","shell.execute_reply.started":"2024-12-15T23:39:25.547102Z","shell.execute_reply":"2024-12-15T23:39:25.551740Z"}}},{"cell_type":"code","source":"from tensorflow.keras import layers\n\n\ninputs = layers.Input(shape=(1,) , dtype = tf.string)\nx = text_vectorizer(inputs)\nx = embedding(x)\nx = layers.LSTM(64)(x)\nouputs = layers.Dense(1)(x)\n\nmodel_2 = tf.keras.Model(inputs,ouputs , name = \"model_2\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:48.489685Z","iopub.execute_input":"2024-12-16T09:02:48.490044Z","iopub.status.idle":"2024-12-16T09:02:48.613705Z","shell.execute_reply.started":"2024-12-16T09:02:48.489996Z","shell.execute_reply":"2024-12-16T09:02:48.612976Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"model_2.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:48.614767Z","iopub.execute_input":"2024-12-16T09:02:48.615124Z","iopub.status.idle":"2024-12-16T09:02:48.631464Z","shell.execute_reply.started":"2024-12-16T09:02:48.615083Z","shell.execute_reply":"2024-12-16T09:02:48.630604Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"model_2\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"model_2\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_1 (\u001b[38;5;33mInputLayer\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ text_vectorization_1            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m15\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mTextVectorization\u001b[0m)             │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m15\u001b[0m, \u001b[38;5;34m128\u001b[0m)        │     \u001b[38;5;34m1,280,000\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm (\u001b[38;5;33mLSTM\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │        \u001b[38;5;34m49,408\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │            \u001b[38;5;34m65\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ text_vectorization_1            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TextVectorization</span>)             │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)        │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,280,000</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">49,408</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">65</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,329,473\u001b[0m (5.07 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,329,473</span> (5.07 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,329,473\u001b[0m (5.07 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,329,473</span> (5.07 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"# compile the model\n\nmodel_2.compile(loss = \"binary_crossentropy\",\n               optimizer = tf.keras.optimizers.Adam(),\n               metrics = [\"accuracy\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:48.632497Z","iopub.execute_input":"2024-12-16T09:02:48.632786Z","iopub.status.idle":"2024-12-16T09:02:48.640243Z","shell.execute_reply.started":"2024-12-16T09:02:48.632761Z","shell.execute_reply":"2024-12-16T09:02:48.639427Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"# fit the model\n\nmodel_2.fit(train_data , train_target,\n            epochs = 5,\n            validation_data = (val_data, val_target),\n            callbacks = [create_tensorboard_callback(Save_dir,experiment_name = \"model_2\")])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:48.641181Z","iopub.execute_input":"2024-12-16T09:02:48.641430Z","iopub.status.idle":"2024-12-16T09:02:58.074818Z","shell.execute_reply.started":"2024-12-16T09:02:48.641405Z","shell.execute_reply":"2024-12-16T09:02:58.073933Z"}},"outputs":[{"name":"stdout","text":"Saving TensorBoard log files to: model_logs/model_2/20241216-090248\nEpoch 1/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - accuracy: 0.6558 - loss: 0.7278 - val_accuracy: 0.7782 - val_loss: 0.5732\nEpoch 2/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8921 - loss: 0.3526 - val_accuracy: 0.7703 - val_loss: 0.6984\nEpoch 3/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9151 - loss: 0.2972 - val_accuracy: 0.7822 - val_loss: 1.3867\nEpoch 4/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9400 - loss: 0.3165 - val_accuracy: 0.7651 - val_loss: 1.5385\nEpoch 5/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9608 - loss: 0.2600 - val_accuracy: 0.7730 - val_loss: 1.4637\n","output_type":"stream"},{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7f32682e28f0>"},"metadata":{}}],"execution_count":43},{"cell_type":"code","source":"# predictions\n\nmodel_2_preds = tf.squeeze(tf.round(model_2.predict(val_data)))\nmodel_2_preds[:10]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:58.076133Z","iopub.execute_input":"2024-12-16T09:02:58.076908Z","iopub.status.idle":"2024-12-16T09:02:58.522191Z","shell.execute_reply.started":"2024-12-16T09:02:58.076867Z","shell.execute_reply":"2024-12-16T09:02:58.521427Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","output_type":"stream"},{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"<tf.Tensor: shape=(10,), dtype=float32, numpy=array([0., 1., 2., 0., 0., 1., 1., 2., 2., 0.], dtype=float32)>"},"metadata":{}}],"execution_count":44},{"cell_type":"code","source":"#evaluation\n\nmodel_2_results = calculate_result(y_true = val_target,\n                y_preds = model_2_preds)\nmodel_2_results","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:58.523123Z","iopub.execute_input":"2024-12-16T09:02:58.523388Z","iopub.status.idle":"2024-12-16T09:02:58.535129Z","shell.execute_reply.started":"2024-12-16T09:02:58.523361Z","shell.execute_reply":"2024-12-16T09:02:58.534222Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"},{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 62.46719160104986,\n 'precision': 0.7213781743021944,\n 'recall': 0.6246719160104987,\n 'f1_score': 0.643724272598698}"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"from tensorflow.keras import layers\n\n\ninputs = layers.Input(shape=(1,) , dtype = tf.string)\nx = text_vectorizer(inputs)\nx = embedding(x)\n# x = layers.LSTM(72 , return_sequences = True)(x)\nx = layers.LSTM(64)(x)# LSTM always needs 3dim input so , above return_sequence must set to true\nx = layers.Dense(64,activation = \"relu\")(x)\nouputs = layers.Dense(1,activation= \"sigmoid\")(x)\n\nmodel_2 = tf.keras.Model(inputs,ouputs , name = \"model_2\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:58.536510Z","iopub.execute_input":"2024-12-16T09:02:58.536848Z","iopub.status.idle":"2024-12-16T09:02:58.574577Z","shell.execute_reply.started":"2024-12-16T09:02:58.536812Z","shell.execute_reply":"2024-12-16T09:02:58.573720Z"}},"outputs":[],"execution_count":46},{"cell_type":"code","source":"# compile the model\n\nmodel_2.compile(loss = \"binary_crossentropy\",\n               optimizer = tf.keras.optimizers.Adam(),\n               metrics = [\"accuracy\"])\n# fit the model\n\nmodel_2.fit(train_data , train_target,\n            epochs = 5,\n            validation_data = (val_data, val_target),\n            callbacks = [create_tensorboard_callback(Save_dir,experiment_name = \"model_2\")])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:02:58.575603Z","iopub.execute_input":"2024-12-16T09:02:58.575933Z","iopub.status.idle":"2024-12-16T09:03:06.982398Z","shell.execute_reply.started":"2024-12-16T09:02:58.575895Z","shell.execute_reply":"2024-12-16T09:03:06.981702Z"}},"outputs":[{"name":"stdout","text":"Saving TensorBoard log files to: model_logs/model_2/20241216-090258\nEpoch 1/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 8ms/step - accuracy: 0.8856 - loss: 0.3151 - val_accuracy: 0.7388 - val_loss: 0.7072\nEpoch 2/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9588 - loss: 0.1310 - val_accuracy: 0.7703 - val_loss: 0.6421\nEpoch 3/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9737 - loss: 0.0904 - val_accuracy: 0.7717 - val_loss: 0.7717\nEpoch 4/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9736 - loss: 0.0715 - val_accuracy: 0.7690 - val_loss: 1.0942\nEpoch 5/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9760 - loss: 0.0642 - val_accuracy: 0.7677 - val_loss: 0.9641\n","output_type":"stream"},{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7f32586f0f10>"},"metadata":{}}],"execution_count":47},{"cell_type":"markdown","source":"### Model 3 GRU Model (Gated Recurrent Unit)","metadata":{}},{"cell_type":"code","source":"inputs = layers.Input(shape = (1,), dtype = tf.string)\nx = text_vectorizer(inputs)\nx = embedding(x)\nx = layers.GRU(64)(x)\noutputs = layers.Dense(1, activation = \"sigmoid\")(x)\n\nmodel_3 = tf.keras.Model(inputs , outputs , name = \"model_3\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:03:06.983521Z","iopub.execute_input":"2024-12-16T09:03:06.983837Z","iopub.status.idle":"2024-12-16T09:03:07.015609Z","shell.execute_reply.started":"2024-12-16T09:03:06.983810Z","shell.execute_reply":"2024-12-16T09:03:07.014955Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"#compile the model \nmodel_3.compile(loss = \"binary_crossentropy\",\n               optimizer = tf.keras.optimizers.Adam(),\n               metrics = [\"accuracy\"])\n\n#fit the model\n\nmodel_3_history = model_3.fit(train_data , train_target,\n                             epochs = 5,\n                             validation_data = (val_data, val_target),\n                              callbacks=[create_tensorboard_callback(Save_dir,experiment_name = \"model_3\")])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:03:07.017096Z","iopub.execute_input":"2024-12-16T09:03:07.017428Z","iopub.status.idle":"2024-12-16T09:03:14.520651Z","shell.execute_reply.started":"2024-12-16T09:03:07.017391Z","shell.execute_reply":"2024-12-16T09:03:14.520033Z"}},"outputs":[{"name":"stdout","text":"Saving TensorBoard log files to: model_logs/model_3/20241216-090307\nEpoch 1/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - accuracy: 0.8699 - loss: 0.2924 - val_accuracy: 0.7808 - val_loss: 0.7692\nEpoch 2/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9778 - loss: 0.0651 - val_accuracy: 0.7690 - val_loss: 0.7801\nEpoch 3/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9790 - loss: 0.0584 - val_accuracy: 0.7703 - val_loss: 0.8868\nEpoch 4/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9822 - loss: 0.0465 - val_accuracy: 0.7507 - val_loss: 0.8468\nEpoch 5/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9782 - loss: 0.0488 - val_accuracy: 0.7677 - val_loss: 0.9990\n","output_type":"stream"}],"execution_count":49},{"cell_type":"code","source":"model_3_preds = tf.squeeze(tf.round(model_3.predict(val_data)))\nmodel_3_results = calculate_result(y_true = val_target,\n                                  y_preds = model_3_preds)\nmodel_3_results","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:03:14.522195Z","iopub.execute_input":"2024-12-16T09:03:14.522964Z","iopub.status.idle":"2024-12-16T09:03:14.942175Z","shell.execute_reply.started":"2024-12-16T09:03:14.522933Z","shell.execute_reply":"2024-12-16T09:03:14.941497Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","output_type":"stream"},{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 76.77165354330708,\n 'precision': 0.7679905783589133,\n 'recall': 0.7677165354330708,\n 'f1_score': 0.7663871505080737}"},"metadata":{}}],"execution_count":50},{"cell_type":"code","source":"# adding layers\ninputs = layers.Input(shape = (1,), dtype = tf.string)\nx = text_vectorizer(inputs)\nx = embedding(x)\nx = layers.GRU(64,return_sequences = True)(x)\nx = layers.LSTM(64,return_sequences=True)(x)\nx = layers.GRU(64)(x)\n\noutputs = layers.Dense(1, activation = \"sigmoid\")(x)\n\nmodel_3 = tf.keras.Model(inputs , outputs , name = \"model_3\")\n#compile the model \nmodel_3.compile(loss = \"binary_crossentropy\",\n               optimizer = tf.keras.optimizers.Adam(),\n               metrics = [\"accuracy\"])\n\n#fit the model\n\nmodel_3_history = model_3.fit(train_data , train_target,\n                             epochs = 10,\n                             validation_data = (val_data, val_target),\n                              callbacks=[create_tensorboard_callback(Save_dir,experiment_name = \"model_3\")])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:03:14.943136Z","iopub.execute_input":"2024-12-16T09:03:14.943414Z","iopub.status.idle":"2024-12-16T09:03:34.600765Z","shell.execute_reply.started":"2024-12-16T09:03:14.943388Z","shell.execute_reply":"2024-12-16T09:03:34.599841Z"}},"outputs":[{"name":"stdout","text":"Saving TensorBoard log files to: model_logs/model_3/20241216-090314\nEpoch 1/10\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 10ms/step - accuracy: 0.8895 - loss: 0.2226 - val_accuracy: 0.7677 - val_loss: 0.8143\nEpoch 2/10\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 7ms/step - accuracy: 0.9746 - loss: 0.0592 - val_accuracy: 0.7625 - val_loss: 1.0133\nEpoch 3/10\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 7ms/step - accuracy: 0.9782 - loss: 0.0491 - val_accuracy: 0.7717 - val_loss: 1.4061\nEpoch 4/10\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.9820 - loss: 0.0395 - val_accuracy: 0.7664 - val_loss: 1.3543\nEpoch 5/10\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.9849 - loss: 0.0339 - val_accuracy: 0.7651 - val_loss: 1.3609\nEpoch 6/10\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 7ms/step - accuracy: 0.9795 - loss: 0.0401 - val_accuracy: 0.7572 - val_loss: 1.3048\nEpoch 7/10\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.9849 - loss: 0.0375 - val_accuracy: 0.7612 - val_loss: 1.5343\nEpoch 8/10\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 7ms/step - accuracy: 0.9826 - loss: 0.0374 - val_accuracy: 0.7612 - val_loss: 1.2138\nEpoch 9/10\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.9831 - loss: 0.0377 - val_accuracy: 0.7559 - val_loss: 1.3248\nEpoch 10/10\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.9845 - loss: 0.0317 - val_accuracy: 0.7585 - val_loss: 1.5502\n","output_type":"stream"}],"execution_count":51},{"cell_type":"markdown","source":"### model 5 Convultional Neural Network","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras import layers\n\ninputs = layers.Input(shape = (1,) , dtype = tf.string)\nx = text_vectorizer(inputs)\nx = embedding(x)\nx = layers.Conv1D(filters=64 ,\n                 activation = \"softmax\",\n                 kernel_size = 5,\n                 strides = 3,\n                 padding = \"valid\")(x)\nx = layers.Conv1D(filters=64 ,\n                 activation = \"relu\",\n                 kernel_size = 3,\n                 padding = \"same\")(x)\nx = layers.GlobalMaxPool1D()(x)\noutputs = layers.Dense(1,activation = \"sigmoid\")(x)\n\nmodel_5 = tf.keras.Model(inputs , outputs, name = \"model_5\")\n\n#compile the model\n\nmodel_5.compile(loss = \"binary_crossentropy\",\n               optimizer= tf.keras.optimizers.Adam(),\n               metrics = [\"accuracy\"])\n\n#fit the model\n\nmodel_5_history = model_5.fit(train_data,train_target,\n                             epochs = 5,\n                             validation_data = (val_data,val_target),\n                             callbacks = [create_tensorboard_callback(Save_dir,experiment_name=\"model_5\")])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:03:34.602373Z","iopub.execute_input":"2024-12-16T09:03:34.603152Z","iopub.status.idle":"2024-12-16T09:03:43.102766Z","shell.execute_reply.started":"2024-12-16T09:03:34.603109Z","shell.execute_reply":"2024-12-16T09:03:43.101835Z"}},"outputs":[{"name":"stdout","text":"Saving TensorBoard log files to: model_logs/model_5/20241216-090334\nEpoch 1/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.7415 - loss: 0.5097 - val_accuracy: 0.7756 - val_loss: 0.6514\nEpoch 2/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9591 - loss: 0.1123 - val_accuracy: 0.7730 - val_loss: 0.7885\nEpoch 3/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9762 - loss: 0.0700 - val_accuracy: 0.7625 - val_loss: 0.9679\nEpoch 4/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9779 - loss: 0.0526 - val_accuracy: 0.7598 - val_loss: 1.1001\nEpoch 5/5\n\u001b[1m215/215\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9827 - loss: 0.0430 - val_accuracy: 0.7546 - val_loss: 1.1931\n","output_type":"stream"}],"execution_count":52},{"cell_type":"code","source":"model_5_preds = tf.squeeze(tf.round(model_5.predict(val_data)))\nmodel_5_result = calculate_result(val_target,model_5_preds)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T10:51:56.864600Z","iopub.execute_input":"2024-12-16T10:51:56.864939Z","iopub.status.idle":"2024-12-16T10:51:57.235101Z","shell.execute_reply.started":"2024-12-16T10:51:56.864913Z","shell.execute_reply":"2024-12-16T10:51:57.234271Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step\n","output_type":"stream"}],"execution_count":113},{"cell_type":"markdown","source":"## Now let's use Pretrained model from TensorFlow Hub","metadata":{}},{"cell_type":"markdown","source":"### Model-6 Using (USE)--Universal Sentence Encoder Embedding from TF Hub","metadata":{}},{"cell_type":"code","source":"import tensorflow_hub as hub\n\nembed = hub.load(\"/kaggle/input/universal-sentence-encoder/tensorflow2/universal-sentence-encoder/2\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:03:43.104405Z","iopub.execute_input":"2024-12-16T09:03:43.105369Z","iopub.status.idle":"2024-12-16T09:03:57.401218Z","shell.execute_reply.started":"2024-12-16T09:03:43.105326Z","shell.execute_reply":"2024-12-16T09:03:57.400494Z"}},"outputs":[],"execution_count":53},{"cell_type":"code","source":"embed([\"there's a flood in my street\"])[0][:50]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:03:57.402303Z","iopub.execute_input":"2024-12-16T09:03:57.402613Z","iopub.status.idle":"2024-12-16T09:03:58.793597Z","shell.execute_reply.started":"2024-12-16T09:03:57.402585Z","shell.execute_reply":"2024-12-16T09:03:58.792608Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"<tf.Tensor: shape=(50,), dtype=float32, numpy=\narray([-0.01157027,  0.02485911,  0.02878049, -0.01271501,  0.0397154 ,\n        0.08827761,  0.02680985,  0.05589838, -0.01068731, -0.0059729 ,\n        0.00639323, -0.01819521,  0.00030817,  0.09105889,  0.05874642,\n       -0.03180628,  0.01512472, -0.05162928,  0.00991366, -0.06865346,\n       -0.04209308,  0.0267898 ,  0.03011007,  0.00321065, -0.00337969,\n       -0.04787356,  0.02266722, -0.00985928, -0.04063612, -0.01292093,\n       -0.04666385,  0.05630299, -0.03949254,  0.00517688,  0.02495828,\n       -0.07014439,  0.02871511,  0.04947681, -0.00633974, -0.08960193,\n        0.02807117, -0.00808362, -0.01360602,  0.05998651, -0.10361787,\n       -0.05195372,  0.00232956, -0.02332529, -0.03758107,  0.0332773 ],\n      dtype=float32)>"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"# Let's create a model with LSTM\n\n## for Transfer learning models we have to use keras layers and sequential to create a model\nimport tf_keras\nseq_encoder = hub.KerasLayer(\"/kaggle/input/universal-sentence-encoder/tensorflow2/universal-sentence-encoder/2\",\n                            input_shape = [ ] ,# representing variable length\n                            dtype = tf.string,\n                            trainable = False)\n# embed_layer = tf.keras.layers.Lambda(seq_encoder)\nmodel_6_hub = tf_keras.Sequential([seq_encoder,\n                                    tf_keras.layers.Dense(64,activation = \"softmax\"),\n                                    tf_keras.layers.Dense(1,activation = \"sigmoid\")])\n#compile the model\n\nmodel_6_hub.compile(loss = \"binary_crossentropy\",\n                    optimizer = tf_keras.optimizers.Adam(),\n                    metrics = [\"accuracy\"])\n\n#fit the model\n\nmodel_6_hub_history = model_6_hub.fit(train_data, train_target,\n                                       epochs = 5,\n                                       validation_data = (val_data,val_target)\n                                       )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:36:12.589328Z","iopub.execute_input":"2024-12-16T09:36:12.590258Z","iopub.status.idle":"2024-12-16T09:36:32.575823Z","shell.execute_reply.started":"2024-12-16T09:36:12.590222Z","shell.execute_reply":"2024-12-16T09:36:32.574915Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/5\n215/215 [==============================] - 7s 13ms/step - loss: 0.6787 - accuracy: 0.5763 - val_loss: 0.6669 - val_accuracy: 0.5446\nEpoch 2/5\n215/215 [==============================] - 2s 9ms/step - loss: 0.6375 - accuracy: 0.6944 - val_loss: 0.6166 - val_accuracy: 0.7664\nEpoch 3/5\n215/215 [==============================] - 2s 9ms/step - loss: 0.5780 - accuracy: 0.7942 - val_loss: 0.5541 - val_accuracy: 0.7940\nEpoch 4/5\n215/215 [==============================] - 2s 9ms/step - loss: 0.5179 - accuracy: 0.8065 - val_loss: 0.5057 - val_accuracy: 0.8018\nEpoch 5/5\n215/215 [==============================] - 2s 9ms/step - loss: 0.4796 - accuracy: 0.8097 - val_loss: 0.4805 - val_accuracy: 0.8005\n","output_type":"stream"}],"execution_count":79},{"cell_type":"code","source":"model_6_hub.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:36:32.577909Z","iopub.execute_input":"2024-12-16T09:36:32.578539Z","iopub.status.idle":"2024-12-16T09:36:32.599621Z","shell.execute_reply.started":"2024-12-16T09:36:32.578496Z","shell.execute_reply":"2024-12-16T09:36:32.598820Z"}},"outputs":[{"name":"stdout","text":"Model: \"sequential_8\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n keras_layer_17 (KerasLayer  (None, 512)               256797824 \n )                                                               \n                                                                 \n dense_9 (Dense)             (None, 64)                32832     \n                                                                 \n dense_10 (Dense)            (None, 1)                 65        \n                                                                 \n=================================================================\nTotal params: 256830721 (979.73 MB)\nTrainable params: 32897 (128.50 KB)\nNon-trainable params: 256797824 (979.61 MB)\n_________________________________________________________________\n","output_type":"stream"}],"execution_count":80},{"cell_type":"code","source":"model_6_hub_preds = tf.squeeze(tf.round(model_6_hub.predict(val_data)))\nmodel_6_hub_preds[:10]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:37:21.959995Z","iopub.execute_input":"2024-12-16T09:37:21.960940Z","iopub.status.idle":"2024-12-16T09:37:22.714527Z","shell.execute_reply.started":"2024-12-16T09:37:21.960901Z","shell.execute_reply":"2024-12-16T09:37:22.713719Z"}},"outputs":[{"name":"stdout","text":"24/24 [==============================] - 1s 7ms/step\n","output_type":"stream"},{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"<tf.Tensor: shape=(10,), dtype=float32, numpy=array([0., 1., 1., 0., 1., 1., 1., 1., 1., 0.], dtype=float32)>"},"metadata":{}}],"execution_count":81},{"cell_type":"code","source":"model_6_hub_result = calculate_result(y_true = val_target,\n                                     y_preds = model_6_hub_preds)\nmodel_6_hub_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:38:36.345625Z","iopub.execute_input":"2024-12-16T09:38:36.346440Z","iopub.status.idle":"2024-12-16T09:38:36.358644Z","shell.execute_reply.started":"2024-12-16T09:38:36.346395Z","shell.execute_reply":"2024-12-16T09:38:36.357736Z"}},"outputs":[{"execution_count":84,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 80.0524934383202,\n 'precision': 0.8032409585165491,\n 'recall': 0.800524934383202,\n 'f1_score': 0.7986020392808586}"},"metadata":{}}],"execution_count":84},{"cell_type":"code","source":"baseline_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T09:38:49.168540Z","iopub.execute_input":"2024-12-16T09:38:49.169465Z","iopub.status.idle":"2024-12-16T09:38:49.176471Z","shell.execute_reply.started":"2024-12-16T09:38:49.169391Z","shell.execute_reply":"2024-12-16T09:38:49.175596Z"}},"outputs":[{"execution_count":85,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 79.26509186351706,\n 'precision': 0.8111390004213173,\n 'recall': 0.7926509186351706,\n 'f1_score': 0.7862189758049549}"},"metadata":{}}],"execution_count":85},{"cell_type":"markdown","source":"### model 7 with 10% data","metadata":{}},{"cell_type":"code","source":"import tf_keras\nseq_encoder = hub.KerasLayer(\"/kaggle/input/universal-sentence-encoder/tensorflow2/universal-sentence-encoder/2\",\n                            input_shape = [ ] ,# representing variable length\n                            dtype = tf.string,\n                            trainable = False)\n# embed_layer = tf.keras.layers.Lambda(seq_encoder)\nmodel_7 = tf_keras.Sequential([seq_encoder,\n                                    tf_keras.layers.Dense(64,activation = \"softmax\"),\n                                    tf_keras.layers.Dense(1,activation = \"sigmoid\")])\n#compile the model\n\nmodel_7.compile(loss = \"binary_crossentropy\",\n                    optimizer = tf_keras.optimizers.Adam(),\n                    metrics = [\"accuracy\"])\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T10:19:15.038858Z","iopub.execute_input":"2024-12-16T10:19:15.039213Z","iopub.status.idle":"2024-12-16T10:19:20.102766Z","shell.execute_reply.started":"2024-12-16T10:19:15.039180Z","shell.execute_reply":"2024-12-16T10:19:20.101804Z"}},"outputs":[],"execution_count":89},{"cell_type":"code","source":"# fitting the model to 10% of data\n\ntrain_10_data = train_data[:int(len(train_data)*0.1)]\ntrain_10_labels = train_target[:int(len(train_target)*0.1)]\n\nmodel_7_history = model_7.fit(train_10_data,train_10_labels,\n                             epochs =5 ,\n                             validation_data = (val_data,val_target))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T10:42:18.273534Z","iopub.execute_input":"2024-12-16T10:42:18.273856Z","iopub.status.idle":"2024-12-16T10:42:20.405359Z","shell.execute_reply.started":"2024-12-16T10:42:18.273831Z","shell.execute_reply":"2024-12-16T10:42:20.404740Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/5\n22/22 [==============================] - 0s 21ms/step - loss: 0.6204 - accuracy: 0.7943 - val_loss: 0.6153 - val_accuracy: 0.8058\nEpoch 2/5\n22/22 [==============================] - 0s 19ms/step - loss: 0.6126 - accuracy: 0.8047 - val_loss: 0.6098 - val_accuracy: 0.7992\nEpoch 3/5\n22/22 [==============================] - 0s 18ms/step - loss: 0.6048 - accuracy: 0.7977 - val_loss: 0.6041 - val_accuracy: 0.7953\nEpoch 4/5\n22/22 [==============================] - 0s 18ms/step - loss: 0.5971 - accuracy: 0.8049 - val_loss: 0.5985 - val_accuracy: 0.7966\nEpoch 5/5\n22/22 [==============================] - 0s 18ms/step - loss: 0.5899 - accuracy: 0.8098 - val_loss: 0.5924 - val_accuracy: 0.8005\n","output_type":"stream"}],"execution_count":99},{"cell_type":"code","source":"len(train_10_data) , len(train_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T10:42:50.555091Z","iopub.execute_input":"2024-12-16T10:42:50.555784Z","iopub.status.idle":"2024-12-16T10:42:50.561222Z","shell.execute_reply.started":"2024-12-16T10:42:50.555748Z","shell.execute_reply":"2024-12-16T10:42:50.560235Z"}},"outputs":[{"execution_count":101,"output_type":"execute_result","data":{"text/plain":"(685, 6851)"},"metadata":{}}],"execution_count":101},{"cell_type":"code","source":"len(val_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T10:43:53.978800Z","iopub.execute_input":"2024-12-16T10:43:53.979580Z","iopub.status.idle":"2024-12-16T10:43:53.984437Z","shell.execute_reply.started":"2024-12-16T10:43:53.979547Z","shell.execute_reply":"2024-12-16T10:43:53.983625Z"}},"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"762"},"metadata":{}}],"execution_count":102},{"cell_type":"code","source":"model_7_preds = tf.squeeze(tf.round(model_7.predict(val_data)))\nmodel_7_result = calculate_result(val_target,model_7_preds)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T10:45:09.720104Z","iopub.execute_input":"2024-12-16T10:45:09.720945Z","iopub.status.idle":"2024-12-16T10:45:10.408918Z","shell.execute_reply.started":"2024-12-16T10:45:09.720907Z","shell.execute_reply":"2024-12-16T10:45:10.408244Z"}},"outputs":[{"name":"stdout","text":"24/24 [==============================] - 1s 7ms/step\n","output_type":"stream"}],"execution_count":103},{"cell_type":"code","source":"model_7_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T10:45:19.092471Z","iopub.execute_input":"2024-12-16T10:45:19.092841Z","iopub.status.idle":"2024-12-16T10:45:19.098468Z","shell.execute_reply.started":"2024-12-16T10:45:19.092810Z","shell.execute_reply":"2024-12-16T10:45:19.097611Z"}},"outputs":[{"execution_count":104,"output_type":"execute_result","data":{"text/plain":"{'accuracy': 80.0524934383202,\n 'precision': 0.8218133512872238,\n 'recall': 0.800524934383202,\n 'f1_score': 0.7939252367162956}"},"metadata":{}}],"execution_count":104},{"cell_type":"markdown","source":"## visualizing the results and comparing","metadata":{}},{"cell_type":"code","source":"all_model_results = pd.DataFrame({\"0_baseline\":baseline_result,\n                                \"1_Dense\":model_1_result,\n                                \"2_LSTM\":model_2_results,\n                                \"3_GRU\":model_3_results,\n                                 \"5_CNN\":model_5_result,\n                                 \"6_tf_hug\":model_6_hub_result,\n                                 \"7_tf_hub_10%\":model_7_result})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T10:56:17.173722Z","iopub.execute_input":"2024-12-16T10:56:17.174072Z","iopub.status.idle":"2024-12-16T10:56:17.179533Z","shell.execute_reply.started":"2024-12-16T10:56:17.174040Z","shell.execute_reply":"2024-12-16T10:56:17.178664Z"}},"outputs":[],"execution_count":136},{"cell_type":"code","source":"\nall_model_results = all_model_results.transpose()\nall_model_results[\"accuracy\"]/=100","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T10:56:30.570232Z","iopub.execute_input":"2024-12-16T10:56:30.571064Z","iopub.status.idle":"2024-12-16T10:56:30.576398Z","shell.execute_reply.started":"2024-12-16T10:56:30.571025Z","shell.execute_reply":"2024-12-16T10:56:30.575405Z"}},"outputs":[],"execution_count":137},{"cell_type":"code","source":"all_model_results","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T10:56:35.271324Z","iopub.execute_input":"2024-12-16T10:56:35.271709Z","iopub.status.idle":"2024-12-16T10:56:35.283679Z","shell.execute_reply.started":"2024-12-16T10:56:35.271674Z","shell.execute_reply":"2024-12-16T10:56:35.282674Z"}},"outputs":[{"execution_count":138,"output_type":"execute_result","data":{"text/plain":"              accuracy  precision    recall  f1_score\n0_baseline    0.792651   0.811139  0.792651  0.786219\n1_Dense       0.792651   0.796168  0.792651  0.790278\n2_LSTM        0.624672   0.721378  0.624672  0.643724\n3_GRU         0.767717   0.767991  0.767717  0.766387\n5_CNN         0.754593   0.754539  0.754593  0.754565\n6_tf_hug      0.800525   0.803241  0.800525  0.798602\n7_tf_hub_10%  0.800525   0.821813  0.800525  0.793925","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>accuracy</th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>f1_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0_baseline</th>\n      <td>0.792651</td>\n      <td>0.811139</td>\n      <td>0.792651</td>\n      <td>0.786219</td>\n    </tr>\n    <tr>\n      <th>1_Dense</th>\n      <td>0.792651</td>\n      <td>0.796168</td>\n      <td>0.792651</td>\n      <td>0.790278</td>\n    </tr>\n    <tr>\n      <th>2_LSTM</th>\n      <td>0.624672</td>\n      <td>0.721378</td>\n      <td>0.624672</td>\n      <td>0.643724</td>\n    </tr>\n    <tr>\n      <th>3_GRU</th>\n      <td>0.767717</td>\n      <td>0.767991</td>\n      <td>0.767717</td>\n      <td>0.766387</td>\n    </tr>\n    <tr>\n      <th>5_CNN</th>\n      <td>0.754593</td>\n      <td>0.754539</td>\n      <td>0.754593</td>\n      <td>0.754565</td>\n    </tr>\n    <tr>\n      <th>6_tf_hug</th>\n      <td>0.800525</td>\n      <td>0.803241</td>\n      <td>0.800525</td>\n      <td>0.798602</td>\n    </tr>\n    <tr>\n      <th>7_tf_hub_10%</th>\n      <td>0.800525</td>\n      <td>0.821813</td>\n      <td>0.800525</td>\n      <td>0.793925</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":138},{"cell_type":"code","source":"all_model_results.sort_values(\"accuracy\",ascending=False).plot(kind=\"bar\" , figsize=(10,8)).legend(bbox_to_anchor=(1,1));","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T11:00:10.836966Z","iopub.execute_input":"2024-12-16T11:00:10.837392Z","iopub.status.idle":"2024-12-16T11:00:11.103296Z","shell.execute_reply.started":"2024-12-16T11:00:10.837355Z","shell.execute_reply":"2024-12-16T11:00:11.102397Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAzoAAALnCAYAAABBZjLxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABck0lEQVR4nO3df3zNdeP/8efZ2GbY/BgbrjE2xGUZFi2KWK1IyHUlyTQXXalJLZ+QbESmH36miAz9cKFSV8VFXctEJsyPlN8/p9hGYUw2dvb9o2/nMrbZGXbOXnvcb7dzuznv9+t9zvPs3dqee7/fr7clLy8vTwAAAABgEBdHBwAAAACAG42iAwAAAMA4FB0AAAAAxqHoAAAAADAORQcAAACAcSg6AAAAAIxD0QEAAABgHIoOAAAAAONUcHSA4rBarTp27JiqVq0qi8Xi6DgAAAAAHCQvL09nz55V3bp15eJS+HGbMlF0jh07Jn9/f0fHAAAAAOAkjh49qr/85S+Fri8TRadq1aqS/vgwXl5eDk4DAAAAwFEyMzPl7+9v6wiFKRNF58/T1by8vCg6AAAAAK55SQuTEQAAAAAwDkUHAAAAgHEoOgAAAACMUyau0QEAAABKIjc3VxcvXnR0DNihYsWKcnV1ve7XoegAAADAOHl5eUpLS9Pp06cdHQUlUK1aNfn5+V3XPTQpOgAAADDOnyWndu3a8vT05KbzZUReXp7Onz+vjIwMSVKdOnVK/FoUHQAAABglNzfXVnJq1qzp6DiwU6VKlSRJGRkZql27dolPY2MyAgAAABjlz2tyPD09HZwEJfXnvrue66soOgAAADASp6uVXTdi31F0AAAAABiHogMAAADAOExGAAAAgHIhYOTyUn2/w5O6ler73QwXL15UxYoVHR2jRDiiAwAAADiJlStXqkOHDqpWrZpq1qypBx54QAcOHLCt//nnn9W3b1/VqFFDlStXVmhoqL7//nvb+i+++EK33XabPDw85OPjo169etnWWSwWffbZZ/ner1q1alqwYIEk6fDhw7JYLFqyZIk6duwoDw8Pffjhh/r111/Vt29f1atXT56engoODta//vWvfK9jtVr12muvKSgoSO7u7qpfv75eeeUVSVLnzp0VHR2db/yJEyfk5uamxMTEG/FlKxBFBwAAAHASWVlZiomJ0ebNm5WYmCgXFxf16tVLVqtV586dU8eOHfXLL7/o888/1/bt2/XCCy/IarVKkpYvX65evXqpa9eu2rp1qxITE9W2bVu7M4wcOVLDhg3Trl27FBERoQsXLqhNmzZavny5fvzxRz3xxBPq37+/Nm7caNtm1KhRmjRpksaMGaOdO3dq0aJF8vX1lSQNGjRIixYtUnZ2tm38Bx98oHr16qlz587X+RUrHKeuAQAAAE6id+/e+Z4nJCSoVq1a2rlzp9avX68TJ05o06ZNqlGjhiQpKCjINvaVV17RI488onHjxtmWtWzZ0u4Mzz77rB566KF8y4YPH27799ChQ7Vq1SotXbpUbdu21dmzZzV9+nTNnDlTAwYMkCQFBgaqQ4cOkqSHHnpI0dHR+ve//62HH35YkrRgwQI9/vjjN3VmPI7oAAAAAE5i37596tu3rxo1aiQvLy8FBARIklJTU7Vt2za1atXKVnKutG3bNnXp0uW6M4SGhuZ7npubq/Hjxys4OFg1atRQlSpVtGrVKqWmpkqSdu3apezs7ELf28PDQ/3791dCQoIkacuWLfrxxx/1+OOPX3fWonBEBwAAAHAS3bt3V4MGDTR37lzVrVtXVqtVLVq0UE5OjipVqlTkttdab7FYlJeXl29ZQTfkrFy5cr7nr7/+uqZPn65p06YpODhYlStX1rPPPqucnJxiva/0x+lrISEh+vnnnzV//nx17txZDRo0uOZ214MjOgAAAIAT+PXXX7Vnzx699NJL6tKli5o1a6ZTp07Z1t96663atm2bfvvttwK3v/XWW4u8uL9WrVo6fvy47fm+fft0/vz5a+b67rvv1KNHDz322GNq2bKlGjVqpL1799rWN27cWJUqVSryvYODgxUaGqq5c+dq0aJFGjhw4DXf93pRdAAAAAAnUL16ddWsWVNz5szR/v379c033ygmJsa2vm/fvvLz81PPnj313Xff6eDBg/rkk0+UnJwsSYqLi9O//vUvxcXFadeuXdqxY4deffVV2/adO3fWzJkztXXrVm3evFlPPvlksaaObty4sb7++mutX79eu3bt0j//+U+lp6fb1nt4eGjEiBF64YUX9N577+nAgQPasGGD5s2bl+91Bg0apEmTJikvLy/fbHA3C0UHAAAAcAIuLi5avHixUlJS1KJFCz333HN6/fXXbevd3Nz01VdfqXbt2uratauCg4M1adIkubq6SpI6deqkjz76SJ9//rlCQkLUuXPnfDOjTZ48Wf7+/rrzzjv16KOPavjw4fL09LxmrpdeekmtW7dWRESEOnXqZCtblxszZoyef/55xcbGqlmzZurTp48yMjLyjenbt68qVKigvn37ysPD4zq+UsVjybvyRD0nlJmZKW9vb505c0ZeXl6OjgMAAAAnduHCBR06dEgNGzYslV+oUTyHDx9WYGCgNm3apNatWxc5tqh9WNxuwGQEAAAAAG6aixcv6tdff9VLL72k22+//Zol50bh1DUAAAAAN813332nOnXqaNOmTZo9e3apvS9HdAAAAADcNJ06dbpqWuvSwBEdAAAAAMah6AAAAAAwDqeu3UhjvUu43ZkbmwMAAAAo5ziiAwAAAMA4FB0AAAAAxqHoAAAAADAORQcAAAAox5KSkmSxWHT69OkbOtbRKDoAAABAOXbHHXfo+PHj8va+9sRa9ox1NGZdAwAAQPlQ0hlyS/x+N39m3ZycHLm5uV3Xa7i5ucnPz++Gj3U0jugAAAAATqJTp06Kjo5WdHS0vL295ePjozFjxigvL0+SFBAQoPHjxysyMlJeXl564oknJEnr1q3TnXfeqUqVKsnf31/PPPOMsrKybK+bnZ2tESNGyN/fX+7u7goKCtK8efMkXX062pEjR9S9e3dVr15dlStX1l//+letWLGiwLGS9Mknn+ivf/2r3N3dFRAQoMmTJ+f7TAEBAZo4caIGDhyoqlWrqn79+pozZ87N+hLacEQHQNnG/asAAIZZuHCh/vGPf2jjxo3avHmznnjiCdWvX1+DBw+WJL3xxhuKjY1VXFycJOnAgQO67777NGHCBCUkJOjEiRO2sjR//nxJUmRkpJKTkzVjxgy1bNlShw4d0smTJwt8/6efflo5OTn69ttvVblyZe3cuVNVqlQpcGxKSooefvhhjR07Vn369NH69ev11FNPqWbNmnr88cdt4yZPnqzx48frxRdf1Mcff6whQ4aoY8eOatq06Q38yuVH0QEAAACciL+/v6ZOnSqLxaKmTZtqx44dmjp1qq3odO7cWc8//7xt/KBBg9SvXz89++yzkqTGjRtrxowZ6tixo2bNmqXU1FQtXbpUX3/9tcLDwyVJjRo1KvT9U1NT1bt3bwUHB19z7JQpU9SlSxeNGTNGktSkSRPt3LlTr7/+er6i07VrVz311FOSpBEjRmjq1KlavXr1TS06nLoGAAAAOJHbb79dFovF9jwsLEz79u1Tbm6uJCk0NDTf+O3bt2vBggWqUqWK7RERESGr1apDhw5p27ZtcnV1VceOHYv1/s8884wmTJig9u3bKy4uTj/88EOhY3ft2qX27dvnW9a+fft8eSXp1ltvtf3bYrHIz89PGRkZxcpTUiUqOm+99ZYCAgLk4eGhdu3aaePGjUWOnzZtmpo2bWo7Z/C5557ThQsXShQYAAAAKM8qV66c7/m5c+f0z3/+U9u2bbM9tm/frn379ikwMFCVKlWy6/UHDRqkgwcPqn///tqxY4dCQ0P15ptvXlfmihUr5ntusVhktVqv6zWvxe6is2TJEsXExCguLk5btmxRy5YtFRERUWgjW7RokUaOHKm4uDjt2rVL8+bN05IlS/Tiiy9ed3gAAADANN9//32+5xs2bFDjxo3l6upa4PjWrVtr586dCgoKuurh5uam4OBgWa1WrVmzptgZ/P399eSTT2rZsmV6/vnnNXfu3ALHNWvWTN99912+Zd99952aNGlSaN7SYvc1OlOmTNHgwYMVFRUlSZo9e7aWL1+uhIQEjRw58qrx69evV/v27fXoo49K+mPWhb59+161AwGH4oJ2AADgJFJTUxUTE6N//vOf2rJli958882rZjK73IgRI3T77bcrOjpagwYNsk0g8PXXX2vmzJkKCAjQgAEDNHDgQNtkBEeOHFFGRoYefvjhq17v2Wef1f33368mTZro1KlTWr16tZo1a1bgez///PO67bbbNH78ePXp00fJycmaOXOm3n777Rv29Sgpu47o5OTkKCUlxXYRkyS5uLgoPDxcycnJBW5zxx13KCUlxXZ628GDB7VixQp17dr1OmIDAAAAZoqMjNTvv/+utm3b6umnn9awYcNs00gX5NZbb9WaNWu0d+9e3XnnnWrVqpViY2NVt25d25hZs2bpb3/7m5566indcsstGjx4cL7ppy+Xm5urp59+Ws2aNdN9992nJk2aFFpcWrduraVLl2rx4sVq0aKFYmNj9fLLL+ebiMBRLHl/TspdDMeOHVO9evW0fv16hYWF2Za/8MILWrNmTaFHaWbMmKHhw4crLy9Ply5d0pNPPqlZs2YV+j7Z2dnKzs62Pc/MzJS/v7/OnDkjLy+v4sYtsYCRy0u03WGPR0u0XXDD+iXabseAHSXazmTsu3KI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kKKjo7VgwQLbayQmJsrLy0tff/21JOnixYu27dauXasKFSpowoQJuu+++/TDDz+U6hEfig4AAADgBLy9vVW1alW5urrKz8/vul8vNTVVlStX1gMPPKCqVauqQYMGatWqlSTp7Nmzmj59umbOnKkBAwZIkgIDA9WhQwdJ0qJFi3ThwgW99957qly5siRp5syZ6t69u1599VX5+vpKkipXrqx3333XVmA++OADWa1Wvfvuu7JYLJKk+fPnq1q1akpKStK999573Z+ruDh1DQAAADDQPffcowYNGqhRo0bq37+/PvzwQ50/f16StGvXLmVnZ6tLly4Fbrtr1y61bNnSVnIkqX379rJardqzZ49tWXBwcL6jNNu3b9f+/ftVtWpVValSRVWqVFGNGjV04cIFHThw4CZ90oJxRAcAAAAwUNWqVbVlyxYlJSXpq6++UmxsrMaOHatNmzapUqVKN+Q9Li9CknTu3Dm1adNGH3744VVja9WqdUPes7g4ogMAAAAYqkKFCgoPD9drr72mH374QYcPH9Y333yjxo0bq1KlSkpMTCxwu2bNmmn79u3KysqyLfvuu+/k4uJim3SgIK1bt9a+fftUu3ZtBQUF5Xt4e3vf8M9XFIoOAAAA4KTOnTunbdu22W4ceujQIW3btk2pqanX3PbLL7/UjBkztG3bNh05ckTvvfeerFarmjZtKg8PD40YMUIvvPCC3nvvPR04cEAbNmzQvHnzJEn9+vWTh4eHBgwYoB9//FGrV6/W0KFD1b9/f9v1OQXp16+ffHx81KNHD61du1aHDh1SUlKSnnnmGf3888835GtSXJy6BgAAADipzZs36+6777Y9j4mJkSQNGDAg3+xnBalWrZqWLVumsWPH6sKFC2rcuLH+9a9/6a9//askacyYMapQoYJiY2N17Ngx1alTR08++aQkydPTU6tWrdKwYcN02223ydPTU71799aUKVOKfE9PT099++23GjFihB566CGdPXtW9erVU5cuXeTl5XUdXwn7UXQAAABQLtzsG5LeCM8++6yeffZZ2/NOnTopLy+vRK/VoUMHJSUlFbrexcVFo0eP1ujRowtcHxwcrG+++abQ7QsrWn5+flq4cKE9UW8KTl0DAAAAYByKDgAAAFAGrV271jaFc0GP8o5T1wAAAIAyKDQ01DZJAa5G0QEAAADKoEqVKikoKMjR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jgJZrVb99ttvqlmzpiwWiwOT3XiZmZny9/fX0aNH5eXl5eg4sAP7ruxi35VN7Leyi31XdrHvyibT91teXp7Onj2runXrFjnOrqLj4+MjV1dXpaen51uenp4uPz+/Arfx8/Oza7wkubu7y93dPd+yatWq2RO1zPHy8jLyP8TygH1XdrHvyib2W9nFviu72Hdlk8n7ragjOX+yazICNzc3tWnTRomJibZlVqtViYmJCgsLK3CbsLCwfOMl6euvvy50PAAAAABcL7tPXYuJidGAAQMUGhqqtm3batq0acrKylJUVJQkKTIyUvXq1VN8fLwkadiwYerYsaMmT56sbt26afHixdq8ebPmzJlzYz8JAAAAAPx/dhedPn366MSJE4qNjVVaWppCQkK0cuVK24QDqampcnH534GiO+64Q4sWLdJLL72kF198UY0bN9Znn32mFi1a3LhPUYa5u7srLi7uqlP14PzYd2UX+65sYr+VXey7sot9Vzax3/5gybvWvGwAAAAAUMbYfcNQAAAAAHB2FB0AAAAAxqHoAAAAADAORQcAAACAcSg6AAAAAIxj9/TSQHk2Y8aMApdbLBZ5eHgoKChId911l1xdXUs5GYojJydHhw4dUmBgoCpU4H9/AICy77333ivWuMjIyJucxPkwvbSDLV++XElJScrNzVX79u3Vu3dvR0dCERo2bKgTJ07o/Pnzql69uiTp1KlT8vT0VJUqVZSRkaFGjRpp9erV8vf3d3Ba/On8+fMaOnSoFi5cKEnau3evGjVqpKFDh6pevXoaOXKkgxPiWtauXat33nlHBw4c0Mcff6x69erp/fffV8OGDdWhQwdHx8NlMjMzC1xeuXJl/ggE3AQuLi6qUqWKKlSooMJ+rbdYLPrtt99KOZnjceqaA40ZM0YvvPCCLBaL8vLy9Nxzz2no0KGOjoUiTJw4Ubfddpv27dunX3/9Vb/++qv27t2rdu3aafr06UpNTZWfn5+ee+45R0fFZUaNGqXt27crKSlJHh4etuXh4eFasmSJA5OhOD755BNFRESoUqVK2rp1q7KzsyVJZ86c0cSJEx2cDleqVq2aqlevftWjUqVKatq0qebOnevoiChEw4YN1ahRoyIfgYGBjo6JKzRr1kxubm6KjIzUmjVrdOrUqase5bHkSBzRKVWbN29WaGio7XmTJk20fft2VapUSZK0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sUJt27Z1YELHoeiUouzsbA0ZMkTBwcEFrj9y5IjGjRtXyqlwM3Dpm3MZNWqUtm/frqSkJN1333225eHh4Ro7dixFx8kNGzZMoaGh2r59u2rWrGlb3qtXLw0ePNiByVCQu+66SzNmzFB4eHiB62fMmMG1qE7qrrvu0ptvvqnOnTsXuH7GjBm68847SzkVrqVXr15asWKFvvzyS917770aOnRovvWenp56+umnHZTOsSg6pSgkJET+/v6Fngq1fft2ig5wE3z22WdasmSJbr/99nwTS/z1r3/VgQMHHJgMxbF27VqtX79ebm5u+ZYHBATol19+cVAqFGbEiBEKCwvT3//+d73wwgu2+x/t2bNHr776qv773/9q/fr1Dk6JgowaNUphYWH629/+phdeeEFNmzaVJO3evVuvvfaaVq1axb5zUl26dFGXLl0KXDds2LByO/kHRacUdevWTadPny50fY0aNRQZGVl6gYBy4sSJEwWed56VlcV9WcoAq9Va4Km9P//8s6pWreqARChKq1attGTJEg0aNOiqqb+rV6+uxYsXq3Xr1g5Kh6K0atVKH3/8sQYOHKhPP/0037qaNWtq6dKl7Lsy6MiRI+rfv3+5nEiC6aWBm+DK6VThWHfddZf+/ve/a+jQoapatap++OEHNWzYUEOHDtW+ffu0cuVKR0dEEfr06SNvb2/NmTPHtv9q1aqlHj16qH79+szK5qTOnz+vVatWad++fZKkxo0b695771XlypUdnAzX8vvvv2vlypXav3+/8vLy1KRJE917773y9PR0dDSUwPbt29W6detyeS04RceJdevWTe+++67q1Knj6CiwE0XHuaxbt07333+/HnvsMS1YsED//Oc/tXPnTq1fv15r1qxRmzZtHB0RRfj5558VERGhvLw87du3T6Ghodq3b598fHz07bffFjlLFJxfcHCwVqxYkW9mNpQN7LuyoTwXHRdHB0Dhvv32W/3++++OjlHuxcTE2O7q/e233+rSpUvX3ObOO+9UpUqVbnY0FFOHDh20bds2Xbp0ScHBwfrqq69Uu3ZtJScnU3LKgL/85S/avn27XnzxRT333HNq1aqVJk2apK1bt1JyDHD48GFdvHjR0TFQAuw7ODuO6Dgxjgo4h4oVK+rnn3+Wr6+vXF1ddfz4cX65AoAbhJ91ZRf7zjnMmDGjyPW//PKL3njj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"},"metadata":{}}],"execution_count":152},{"cell_type":"code","source":"all_model_results[\"accuracy\"].sort_values(ascending=False).plot(kind=\"bar\" , figsize=(10,8)).legend(bbox_to_anchor=(1,1));","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T11:01:53.845948Z","iopub.execute_input":"2024-12-16T11:01:53.846325Z","iopub.status.idle":"2024-12-16T11:01:54.105203Z","shell.execute_reply.started":"2024-12-16T11:01:53.846281Z","shell.execute_reply":"2024-12-16T11:01:54.104170Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":154},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}